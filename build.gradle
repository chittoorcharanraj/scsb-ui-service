buildscript {
	ext {
		springBootVersion = '3.4.0'
		set('springCloudVersion', "2024.0.0")
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.0.1.5171"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'

//added to accept systemproperties while executing gradlew test cmd
test {
	systemProperties = System.properties
}

bootJar {
	archiveBaseName = 'SCSB-UI'
	archiveVersion = '0.0.1-SNAPSHOT'
	// layered()
}
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
	mavenCentral()
}


dependencies {
	implementation fileTree(dir: '/data/commonjar', include: '*2.9.jar')
	implementation fileTree(dir: '/data/commonjar', include: '*base-1.0.jar')
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation group: 'org.json', name: 'json', version: '20240303'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'

	implementation('commons-beanutils:commons-beanutils:1.9.4')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation("org.springframework.boot:spring-boot-starter-data-rest")
	implementation('org.springframework.boot:spring-boot-starter-web-services')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.security:spring-security-jwt')
	implementation 'org.springframework.security:spring-security-cas:6.4.2'
	implementation 'org.springframework.security:spring-security-config:6.4.2'
	implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.6.8')
	implementation 'org.springframework.security:spring-security-oauth2-client:6.4.2'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server:6.4.2'
	implementation 'org.springframework.security:spring-security-oauth2-authorization-server:1.4.0'
	implementation('org.springframework.data:spring-data-solr:4.3.15')
			{exclude module: 'solr-solrj'; exclude module: 'solr-data-commons'; exclude module: 'spring-data-jpa'}
	implementation('org.codehaus.jettison:jettison:1.5.4')
	implementation('org.springframework.data:spring-data-commons')
	implementation('org.springframework.data:spring-data-jpa')
	implementation('com.google.guava:guava:33.4.0-jre') {exclude module: "solr-solrj"}
	implementation('org.apache.solr:solr-solrj:9.6.1')
	implementation('info.freelibrary:freelib-marc4j:2.6.12')
	implementation(group: 'net.sourceforge.javacsv', name: 'javacsv', version: '2.0')
	implementation('io.springfox:springfox-swagger2:3.0.0')
	implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
	implementation('org.projectlombok:lombok:1.18.36')
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.11'
	implementation 'org.springframework.amqp:spring-rabbit'
	implementation 'net.logstash.logback:logstash-logback-encoder:8.0'
	annotationProcessor('org.projectlombok:lombok:1.18.36')
	testImplementation('org.projectlombok:lombok:1.18.36')
	testAnnotationProcessor('org.projectlombok:lombok:1.18.36')
	implementation group: 'com.mysql', name: 'mysql-connector-j', version: '9.1.0'
	implementation 'org.jasig.cas.client:cas-client-core:3.6.4'
	implementation 'commons-io:commons-io:2.18.0'

	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.11.0'
	testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
	testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
	testImplementation 'junit:junit:4.13.2'
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	//testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.apache.logging.log4j') {
			details.useVersion '3.0.0-beta2'
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
}

test{
	jvmArgs "-Dnet.bytebuddy.experimental=true"
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

jacoco {
	toolVersion = "0.8.12"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

task scsbUiJavadocs(type: Javadoc) {
	source = sourceSets.main.java
	classpath = configurations.implementation
	options.addStringOption('Xdoclint:none', '-quiet')
	String home = System.getProperty("user.home");
	destinationDir =  new File(home+"/scsb-javadocs/scsb-ui");

}

sonarqube {
	properties {
		property "systemProp.sonar.host.url", ""
		property "systemProp.sonar.jdbc.url", ""
		property "systemProp.sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
		property "sonar.projectName", "scsb-ui-service"
		property "systemProp.sonar.jdbc.username", ""
		property "systemProp.sonar.jdbc.password", ""
	}
}

jar {
	enabled = false
	archiveClassifier = '' //use empty string
}

test {
	forkEvery = 1
}
